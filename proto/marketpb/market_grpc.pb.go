// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: proto/market.proto

package marketpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MarketService_GetCandles_FullMethodName          = "/nyyu.market.v1.MarketService/GetCandles"
	MarketService_GetLatestCandle_FullMethodName     = "/nyyu.market.v1.MarketService/GetLatestCandle"
	MarketService_SubscribeCandles_FullMethodName    = "/nyyu.market.v1.MarketService/SubscribeCandles"
	MarketService_GetPrice_FullMethodName            = "/nyyu.market.v1.MarketService/GetPrice"
	MarketService_GetPrices_FullMethodName           = "/nyyu.market.v1.MarketService/GetPrices"
	MarketService_SubscribePrices_FullMethodName     = "/nyyu.market.v1.MarketService/SubscribePrices"
	MarketService_GetMarkPrice_FullMethodName        = "/nyyu.market.v1.MarketService/GetMarkPrice"
	MarketService_GetMarkPrices_FullMethodName       = "/nyyu.market.v1.MarketService/GetMarkPrices"
	MarketService_SubscribeMarkPrices_FullMethodName = "/nyyu.market.v1.MarketService/SubscribeMarkPrices"
	MarketService_Health_FullMethodName              = "/nyyu.market.v1.MarketService/Health"
	MarketService_GetStats_FullMethodName            = "/nyyu.market.v1.MarketService/GetStats"
)

// MarketServiceClient is the client API for MarketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MarketService provides high-performance candle, kline, and price data
type MarketServiceClient interface {
	// Candle operations
	GetCandles(ctx context.Context, in *GetCandlesRequest, opts ...grpc.CallOption) (*GetCandlesResponse, error)
	GetLatestCandle(ctx context.Context, in *GetLatestCandleRequest, opts ...grpc.CallOption) (*Candle, error)
	SubscribeCandles(ctx context.Context, in *SubscribeCandlesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CandleUpdate], error)
	// Price operations
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*Price, error)
	GetPrices(ctx context.Context, in *GetPricesRequest, opts ...grpc.CallOption) (*GetPricesResponse, error)
	SubscribePrices(ctx context.Context, in *SubscribePricesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PriceUpdate], error)
	// Mark price operations (futures)
	GetMarkPrice(ctx context.Context, in *GetMarkPriceRequest, opts ...grpc.CallOption) (*MarkPrice, error)
	GetMarkPrices(ctx context.Context, in *GetMarkPricesRequest, opts ...grpc.CallOption) (*GetMarkPricesResponse, error)
	SubscribeMarkPrices(ctx context.Context, in *SubscribeMarkPricesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MarkPriceUpdate], error)
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// Stats and info
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
}

type marketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketServiceClient(cc grpc.ClientConnInterface) MarketServiceClient {
	return &marketServiceClient{cc}
}

func (c *marketServiceClient) GetCandles(ctx context.Context, in *GetCandlesRequest, opts ...grpc.CallOption) (*GetCandlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCandlesResponse)
	err := c.cc.Invoke(ctx, MarketService_GetCandles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) GetLatestCandle(ctx context.Context, in *GetLatestCandleRequest, opts ...grpc.CallOption) (*Candle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Candle)
	err := c.cc.Invoke(ctx, MarketService_GetLatestCandle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) SubscribeCandles(ctx context.Context, in *SubscribeCandlesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CandleUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarketService_ServiceDesc.Streams[0], MarketService_SubscribeCandles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCandlesRequest, CandleUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketService_SubscribeCandlesClient = grpc.ServerStreamingClient[CandleUpdate]

func (c *marketServiceClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*Price, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Price)
	err := c.cc.Invoke(ctx, MarketService_GetPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) GetPrices(ctx context.Context, in *GetPricesRequest, opts ...grpc.CallOption) (*GetPricesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPricesResponse)
	err := c.cc.Invoke(ctx, MarketService_GetPrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) SubscribePrices(ctx context.Context, in *SubscribePricesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PriceUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarketService_ServiceDesc.Streams[1], MarketService_SubscribePrices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribePricesRequest, PriceUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketService_SubscribePricesClient = grpc.ServerStreamingClient[PriceUpdate]

func (c *marketServiceClient) GetMarkPrice(ctx context.Context, in *GetMarkPriceRequest, opts ...grpc.CallOption) (*MarkPrice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkPrice)
	err := c.cc.Invoke(ctx, MarketService_GetMarkPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) GetMarkPrices(ctx context.Context, in *GetMarkPricesRequest, opts ...grpc.CallOption) (*GetMarkPricesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMarkPricesResponse)
	err := c.cc.Invoke(ctx, MarketService_GetMarkPrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) SubscribeMarkPrices(ctx context.Context, in *SubscribeMarkPricesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MarkPriceUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarketService_ServiceDesc.Streams[2], MarketService_SubscribeMarkPrices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeMarkPricesRequest, MarkPriceUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketService_SubscribeMarkPricesClient = grpc.ServerStreamingClient[MarkPriceUpdate]

func (c *marketServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, MarketService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, MarketService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServiceServer is the server API for MarketService service.
// All implementations must embed UnimplementedMarketServiceServer
// for forward compatibility.
//
// MarketService provides high-performance candle, kline, and price data
type MarketServiceServer interface {
	// Candle operations
	GetCandles(context.Context, *GetCandlesRequest) (*GetCandlesResponse, error)
	GetLatestCandle(context.Context, *GetLatestCandleRequest) (*Candle, error)
	SubscribeCandles(*SubscribeCandlesRequest, grpc.ServerStreamingServer[CandleUpdate]) error
	// Price operations
	GetPrice(context.Context, *GetPriceRequest) (*Price, error)
	GetPrices(context.Context, *GetPricesRequest) (*GetPricesResponse, error)
	SubscribePrices(*SubscribePricesRequest, grpc.ServerStreamingServer[PriceUpdate]) error
	// Mark price operations (futures)
	GetMarkPrice(context.Context, *GetMarkPriceRequest) (*MarkPrice, error)
	GetMarkPrices(context.Context, *GetMarkPricesRequest) (*GetMarkPricesResponse, error)
	SubscribeMarkPrices(*SubscribeMarkPricesRequest, grpc.ServerStreamingServer[MarkPriceUpdate]) error
	// Health check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	// Stats and info
	GetStats(context.Context, *GetStatsRequest) (*StatsResponse, error)
	mustEmbedUnimplementedMarketServiceServer()
}

// UnimplementedMarketServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarketServiceServer struct{}

func (UnimplementedMarketServiceServer) GetCandles(context.Context, *GetCandlesRequest) (*GetCandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandles not implemented")
}
func (UnimplementedMarketServiceServer) GetLatestCandle(context.Context, *GetLatestCandleRequest) (*Candle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestCandle not implemented")
}
func (UnimplementedMarketServiceServer) SubscribeCandles(*SubscribeCandlesRequest, grpc.ServerStreamingServer[CandleUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCandles not implemented")
}
func (UnimplementedMarketServiceServer) GetPrice(context.Context, *GetPriceRequest) (*Price, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedMarketServiceServer) GetPrices(context.Context, *GetPricesRequest) (*GetPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrices not implemented")
}
func (UnimplementedMarketServiceServer) SubscribePrices(*SubscribePricesRequest, grpc.ServerStreamingServer[PriceUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePrices not implemented")
}
func (UnimplementedMarketServiceServer) GetMarkPrice(context.Context, *GetMarkPriceRequest) (*MarkPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkPrice not implemented")
}
func (UnimplementedMarketServiceServer) GetMarkPrices(context.Context, *GetMarkPricesRequest) (*GetMarkPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkPrices not implemented")
}
func (UnimplementedMarketServiceServer) SubscribeMarkPrices(*SubscribeMarkPricesRequest, grpc.ServerStreamingServer[MarkPriceUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMarkPrices not implemented")
}
func (UnimplementedMarketServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedMarketServiceServer) GetStats(context.Context, *GetStatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedMarketServiceServer) mustEmbedUnimplementedMarketServiceServer() {}
func (UnimplementedMarketServiceServer) testEmbeddedByValue()                       {}

// UnsafeMarketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServiceServer will
// result in compilation errors.
type UnsafeMarketServiceServer interface {
	mustEmbedUnimplementedMarketServiceServer()
}

func RegisterMarketServiceServer(s grpc.ServiceRegistrar, srv MarketServiceServer) {
	// If the following call pancis, it indicates UnimplementedMarketServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarketService_ServiceDesc, srv)
}

func _MarketService_GetCandles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).GetCandles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_GetCandles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).GetCandles(ctx, req.(*GetCandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_GetLatestCandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestCandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).GetLatestCandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_GetLatestCandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).GetLatestCandle(ctx, req.(*GetLatestCandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_SubscribeCandles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCandlesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketServiceServer).SubscribeCandles(m, &grpc.GenericServerStream[SubscribeCandlesRequest, CandleUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketService_SubscribeCandlesServer = grpc.ServerStreamingServer[CandleUpdate]

func _MarketService_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_GetPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_GetPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).GetPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_GetPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).GetPrices(ctx, req.(*GetPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_SubscribePrices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePricesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketServiceServer).SubscribePrices(m, &grpc.GenericServerStream[SubscribePricesRequest, PriceUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketService_SubscribePricesServer = grpc.ServerStreamingServer[PriceUpdate]

func _MarketService_GetMarkPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarkPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).GetMarkPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_GetMarkPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).GetMarkPrice(ctx, req.(*GetMarkPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_GetMarkPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarkPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).GetMarkPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_GetMarkPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).GetMarkPrices(ctx, req.(*GetMarkPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_SubscribeMarkPrices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeMarkPricesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketServiceServer).SubscribeMarkPrices(m, &grpc.GenericServerStream[SubscribeMarkPricesRequest, MarkPriceUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketService_SubscribeMarkPricesServer = grpc.ServerStreamingServer[MarkPriceUpdate]

func _MarketService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketService_ServiceDesc is the grpc.ServiceDesc for MarketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nyyu.market.v1.MarketService",
	HandlerType: (*MarketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCandles",
			Handler:    _MarketService_GetCandles_Handler,
		},
		{
			MethodName: "GetLatestCandle",
			Handler:    _MarketService_GetLatestCandle_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _MarketService_GetPrice_Handler,
		},
		{
			MethodName: "GetPrices",
			Handler:    _MarketService_GetPrices_Handler,
		},
		{
			MethodName: "GetMarkPrice",
			Handler:    _MarketService_GetMarkPrice_Handler,
		},
		{
			MethodName: "GetMarkPrices",
			Handler:    _MarketService_GetMarkPrices_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _MarketService_Health_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _MarketService_GetStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeCandles",
			Handler:       _MarketService_SubscribeCandles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribePrices",
			Handler:       _MarketService_SubscribePrices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMarkPrices",
			Handler:       _MarketService_SubscribeMarkPrices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/market.proto",
}
